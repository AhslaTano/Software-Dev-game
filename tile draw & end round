using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class WellDrawMenu : MonoBehaviour
{
    private int drawCount = 0;
    private int maxDrawAttempts = 3; // Maximum draws allowed from the well

    public bool roundEnded = false;// tally score, deck reshuffled, deal new hands 
    public Button endRoundButton;
    public Button drawButton;
    public GameObject endRoundMenuUI; // Reference to the setup menu UI panel

    private DeckManager deckManager; // Reference to the deck
    private HandManager handManager; // Reference to HandManager
    private GameManager gameManager; // Reference to GameManager

    void Start()
    {
        deckManager = FindObjectOfType<DeckManager>(); // Get deck manager reference
        handManager = FindObjectOfType<HandManager>(); // Get HandManager reference
        gameManager = FindObjectOfType<GameManager>(); // Get GameManager reference

        if (drawButton != null)
            drawButton.onClick.AddListener(DrawFromWell);

        if (endRoundButton != null)
            endRoundButton.onClick.AddListener(EndRound);
    }

    public void DrawFromWell()
    {
        if (drawCount >= maxDrawAttempts)
        {
            Debug.LogWarning("Maximum draw attempts reached! If no valid move then end round");
            drawButton.GetComponent<Image>().enabled = false;
            drawButton.GetComponent<Button>().enabled = false;
            endRoundButton.GetComponent<Image>().enabled = true;
            endRoundButton.GetComponent<Button>().enabled = true;
            return;
        }

        if (deckManager == null || deckManager.deck.Count == 0)
        {
            Debug.LogWarning("The deck is empty! No tiles to draw.");
            return;
        }

        // Determine the current player from GameManager
        int currentPlayer = gameManager.playerTurn;

        // Draw a random tile from the deck
        int randomIndex = UnityEngine.Random.Range(0, deckManager.deck.Count);
        TriominoObject drawnTile = deckManager.deck[randomIndex];
        deckManager.deck.RemoveAt(randomIndex);

        // Assign the tile to the correct player's hand
        if (currentPlayer == 1)
        {
            handManager.DrawToHandP1(drawnTile);
            Debug.Log($"Player 1 drew tile: {drawnTile.name}");
        }
        else
        {
            handManager.DrawToHandP2(drawnTile);
            Debug.Log($"Player 2 drew tile: {drawnTile.name}");
        }

        handManager.UpdateHandVisuals(); // Update tile positions
        drawCount++;

        // Optional: Check if the drawn tile creates a valid move
        /*if (IsValidMove(drawnTile))
        {
            Debug.Log("Valid move found after drawing.");
            return;
        }

        Debug.Log("No valid moves available after drawing.");*/
    }

    public void EndRound()
    {
        // Deduct 25 points from player score who ended the round
        // Recollect all tiles, reshuffle, redeal hands, reset draw penalty 
        roundEnded = true;
        endRoundMenuUI.SetActive(false); // Hide menu once the round restarts
    }

    private bool IsValidMove(TriominoObject tile)
    {
        // Implement logic to check if the drawn tile can be played with tiles on the board
        return false;
    }
}
