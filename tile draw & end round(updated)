using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class WellDrawMenu : MonoBehaviour
{
    public bool roundEnded { get; set; }
    private int drawCount = 0; // placeholder count for conditionals
    private int p1drawCount = 0; // player 1 draw count
    private int p2drawCount = 0; // player 2 draw count
    private int maxDrawAttempts = 3; // Maximum draws allowed from the well

    public Button endRoundButton;
    public Button drawButton;
    public Button skipTurnButton; // New Skip Turn button
    public GameObject endRoundMenuUI;

    private DeckManager deckManager;
    private HandManager handManager;
    private GameManager gameManager;

    void Start()
    {
        roundEnded = false;
        deckManager = FindObjectOfType<DeckManager>();
        handManager = FindObjectOfType<HandManager>();
        gameManager = FindObjectOfType<GameManager>();

        if (drawButton != null)
            drawButton.onClick.AddListener(DrawFromWell);

        if (skipTurnButton != null)
            skipTurnButton.onClick.AddListener(SkipTurn);

        if (endRoundButton != null)
            endRoundButton.onClick.AddListener(EndRound);

        skipTurnButton.gameObject.SetActive(false); // Hide Skip button initially
    }

    public void DrawFromWell()
    {
        if(currentPlayer == 1)
        {drawCount = p1drawCount;}
        else{drawCount = p2drawCount;}
        if (drawCount >= maxDrawAttempts)
        {
            Debug.LogWarning("Player cannot draw any more tiles.");
            Debug.LogWarning("None of your 3 tiles could be placed. 25 point penalty!");
            gameManager.ScorePenalty(25);
            ShowSkipTurnButton();
            return;
        }

        if (deckManager == null || deckManager.deck.Count == 0)
        {
            Debug.LogWarning("The deck is empty! 10 point penalty applied.");
            gameManager.ScorePenalty(10);
            ShowSkipTurnButton();
            return;
        }

        int currentPlayer = gameManager.playerTurn;
        int randomIndex = UnityEngine.Random.Range(0, deckManager.deck.Count);
        TriominoObject drawnTile = deckManager.deck[randomIndex];
        deckManager.deck.RemoveAt(randomIndex);

        if (currentPlayer == 1)
        {
            handManager.DrawToHandP1(drawnTile);
            Debug.Log($"Player 1 drew tile: {drawnTile.name}");
            p1drawCount++
        }
        else
        {
            handManager.DrawToHandP2(drawnTile);
            Debug.Log($"Player 2 drew tile: {drawnTile.name}");
            p2drawCount++;
        }

        handManager.UpdateHandVisuals();
        gameManager.ScorePenalty(5); // 5 point penalty for drawing
    }

    public void SkipTurn()
    {
        Debug.Log($"Player {gameManager.playerTurn} skipped their turn.");

        // Reset buttons for the next player
        drawButton.gameObject.SetActive(true);
        skipTurnButton.gameObject.SetActive(false);

        gameManager.PlayerCannotMove(); // Pass turn to the next player
    }

    private void ShowSkipTurnButton()
    {
        drawButton.gameObject.SetActive(false);
        skipTurnButton.gameObject.SetActive(true);
    }

    public void EndRound()
    {
        Debug.LogWarning("Both players are stuck. Ending round.");
        roundEnded = true;
        endRoundMenuUI.SetActive(false);
    }
}
